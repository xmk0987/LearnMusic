// AudioContextProvider.tsx
"use client";
import { getSampler } from "@/lib/toneSampler";
import { createContext, useContext, ReactNode, useState } from "react";
import * as Tone from "tone";

interface AudioContextValue {
  playNote: (note: string, duration?: string) => Promise<void>;
  initAudio: () => Promise<void>;
}

const AudioCtx = createContext<AudioContextValue>({
  playNote: async () => {},
  initAudio: async () => {},
});

export const useAudioContext = () => useContext(AudioCtx);

export const AudioContextProvider = ({ children }: { children: ReactNode }) => {
  const [sampler, setSampler] = useState<Tone.Sampler | null>(null);
  const [audioAllowed, setAudioAllowed] = useState(false);

  /**
   * Initializes the AudioContext and loads the sampler.
   * This must be called via a user gesture.
   */
  const initAudio = async () => {
    try {
      // Resume the AudioContext (must be triggered by a user interaction).
      await Tone.start();
      console.log("Audio context started");

      // Load the sampler after the AudioContext is resumed.
      const loadedSampler = await getSampler();
      setSampler(loadedSampler);
      setAudioAllowed(true);
    } catch (error) {
      console.error("Audio initialization error:", error);
      setAudioAllowed(false);
    }
  };

  /**
   * Plays a note using the loaded sampler.
   * Assumes that initAudio has been called.
   *
   * @param note - The note to play (e.g., "C4").
   * @param duration - The duration of the note (default "8n").
   */
  const playNote = async (note: string, duration: string = "8n") => {
    if (!sampler) {
      console.warn("Audio not initialized. Please enable audio first.");
      return;
    }
    sampler.triggerAttackRelease(note, duration);
  };

  return (
    <AudioCtx.Provider
      value={{
        playNote,
        initAudio,
      }}
    >
      {children}

      {/* Modal shown if audio hasn't been enabled */}
      {!audioAllowed && (
        <div
          style={{
            position: "fixed",
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: "rgba(0,0,0,0.5)",
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            zIndex: 1000,
          }}
        >
          <div
            style={{
              backgroundColor: "#fff",
              padding: "2rem",
              borderRadius: "8px",
              textAlign: "center",
              maxWidth: "90%",
              boxShadow: "0 2px 10px rgba(0,0,0,0.3)",
            }}
          >
            <h2>Enable Audio</h2>
            <p>Please allow audio for piano sounds and other effects.</p>
            <button
              onClick={initAudio}
              style={{
                padding: "0.5rem 1rem",
                fontSize: "1rem",
                cursor: "pointer",
              }}
            >
              Enable Audio
            </button>
          </div>
        </div>
      )}
    </AudioCtx.Provider>
  );
};

export default AudioContextProvider;
